#!/usr/bin/env python3
# IBM_PROLOG_BEGIN_TAG
#
# Copyright 2019,2020 IBM International Business Machines Corp.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  IBM_PROLOG_END_TAG
import sys
import importlib
import paiv_cli_utils
from docopt import docopt

usage_stmt = f"""
Usage:  vision {paiv_cli_utils.common_cmd_flags} [-?] <entity> [<args>...]

Where:
{paiv_cli_utils.common_cmd_flag_descriptions}
   -?  displays this help message.

   <entity> is required and must be one of:
      categories     -- work with category entities
      datasets       -- work with dataset entities
      files          -- work with dataset file entities
      object-tags    -- work with object detection tag entities
      object-labels  -- work with object detection label entities (aka annotation entities)
      dltasks        -- work with DL training tasks
      trained-models -- work with trained model entities
      deployed-models -- work with deployed model entities
      projects       -- work with project entities
      users          -- work with users

'vision' provides access to Visual Insights entities via the ReST API.
Use 'vision <entity> --help' for more information about operating on a given entity"""

entity_map = {
    "categories": "categories",
    "datasets": "datasets",
    "deployed-models": "deployed-models",
    "dltasks": "dltasks",
    "files": "files",
    "help": "help",
    "obj-labels": "object-labels",
    "obj-tags": "object-tags",
    "object-labels": "object-labels",
    "object-tags": "object-tags",
    "trained-models": "trained-models",
    "projects": "projects",
    "users": "users"
}

if __name__ == "__main__":
    # All of the PAIV CLI requires python 3.6 due to format string
    # Make the check in a common location
    if sys.hexversion < 0x03060000:
        sys.exit("Python 3.6 or newer is required to run this program. You have {}.{}."
                 .format(sys.version_info[0], sys.version_info[1]))

    args = docopt(usage_stmt, options_first=True)
    if args is not None:
        #print(f"@@@ args={args}", file=sys.stderr)
        if args["<entity>"] in ["help", None]:
            print(usage_stmt, file=sys.stderr)
        else:
            # argv = [args["<entity>"]] + args["<args>"]
            argv = args["<args>"]
            if argv is None:
                argv = ["--help"]

            # handle abbreviated entities
            entity = args["<entity>"]
            if args["<entity>"] not in entity_map:
                matches = [entity_map[i] for i in entity_map.keys() if i.startswith(entity)]
                if len(matches) == 1:
                    args["<entity>"] = matches[0]
                else:
                    # Generate correct error message and exit (with usage statement)
                    if len(matches) > 1:
                        print(f"ERROR: entity '{entity}' not unique; matches={matches}")
                    else:
                        print(f"ERROR: Unknown entity -- {entity}", file=sys.stderr)
                    print(usage_stmt, file=sys.stderr)
                    exit(1)

            entity = entity_map.get(args["<entity>"], None)

            try:
                pkg = importlib.import_module(entity, package=None)
                pkg.main(argv, cmd_flags=args)
            except ModuleNotFoundError:
                print(f"ERROR: Unknown entity -- {entity}", file=sys.stderr)
                print(usage_stmt, file=sys.stderr)
